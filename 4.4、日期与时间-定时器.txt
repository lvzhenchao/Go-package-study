
定时器
	Timer: 到达指定时间触发且只触发一次
	Ticker：间隔特定时间触发

1.1、Timer
	代表单次时间事件：
		当Timer到期是，当时的时间会被发给C(channel)

		Timer的实例必须通过NewTimer或AfterFunc获得
			type Timer struct {
				C <-chan Time
				r runtimeTimer
			}

1.2、Timer相关函数或方法的使用

	示例：
		time.After模拟超时：
			c := make(chan int)
			go func() {
				time.Sleep(3 * time.Second)
				<-c
			}()
			select {
				case c <- 1:
					fmt.Println(channel...)
				case <-time.After(2 * time.Second):
					close(c)
					fmt.Println("超时了...")
			}

		time.Stop 停止定时器 或 time.Reset 重置定时器
			start := time.Now()
			timer := time.AfterFunc(2*time.Second, func() {
			    fmt.Println("after func callback, elaspe:", time.Now().Sub(start))
			})

			time.Sleep(1 * time.Second)
			// time.Sleep(3*time.Second)
			// Reset 在 Timer 还未触发时返回 true；触发了或 Stop 了，返回 false
			if timer.Reset(3 * time.Second) {
			    fmt.Println("timer has not trigger!")
			} else {
			    fmt.Println("timer had expired or stop!")
			}

			time.Sleep(10 * time.Second)


2、Ticker相关函数或方法的使用
	Ticker 和 Timer 类似，区别是：Ticker 中的 runtimeTimer 字段的 period 字段会赋值为 NewTicker(d Duration) 中的 d，表示每间隔 d 纳秒，定时器就会触发一次

