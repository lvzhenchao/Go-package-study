
容器类型：堆[heap]、链表[list]、环[ring]

1.1、堆
	这里使用的的数据结构是最小二叉树【根节点比左边子树和右边子树的所有值都小】
	接口：
		type Interface interface {
			sort.Interface
			Push(x interface{})
			Pop() interface{}
		}

	如果定义了一个堆：
		需要实现五个方法：
			type IntHeap []int

			func (h IntHeap) Len() int           { return len(h) }
			func (h IntHeap) Less(i, j int) bool { return h[i] < h[j] }
			func (h IntHeap) Swap(i, j int)      { h[i], h[j] = h[j], h[i] }

			func (h *IntHeap) Push(x interface{}) {
			    *h = append(*h, x.(int))
			}

			func (h *IntHeap) Pop() interface{} {
			    old := *h
			    n := len(old)
			    x := old[n-1]
			    *h = old[0 : n-1]
			    return x
			}

			使用：
				h := &IntHeap{2, 1, 5}
				heap.Init(h)
				heap.Push(h, 3)
				heap.Pop(h)

1.2、链表
	链表就是一个有prev和next指针的数组，它维护两个type
	结构体：
		type Element struct {
			nex, prev *Element //上一个元素和下一个元素
			list *List //元素所在链表
			Value interface{} //元素
		}
		type List struct {
			root Element //链表根元素
			len int //链表长度
		}
		思路：
			先建list、往list插入值【list 内部创建一个Element,并内部设置好Element的next, prev】

		查看list内方法...

1.3、环
	type Ring struct {
		next, prev *Ring
		Value      interface{} // for use by client; untouched by this library
	}
    func New(n int) *Ring  // 初始化环
    func (r *Ring) Do(f func(interface{}))  // 循环环进行操作
    func (r *Ring) Len() int // 环长度
    func (r *Ring) Link(s *Ring) *Ring // 连接两个环
    func (r *Ring) Move(n int) *Ring // 指针从当前元素开始向后移动或者向前（n 可以为负数）
    func (r *Ring) Next() *Ring // 当前元素的下个元素
    func (r *Ring) Prev() *Ring // 当前元素的上个元素
    func (r *Ring) Unlink(n int) *Ring // 从当前元素开始，删除 n 个元素
