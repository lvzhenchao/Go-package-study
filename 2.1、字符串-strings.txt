
string类型可以看成一种特殊的slice类型
	字符串长度：len函数
	支持切片操作：获取子串
说明：这里说的字符，指得是 rune 类型，即一个 UTF-8 字符（Unicode 代码点）

1、字符串操作
	长度
	求子串
	是否存在某个字符或子串
	子串出现的次数
	字符串分割
	字符串是否有某个前缀或后缀
	字符串或子串在字符串中收藏出现的位置或最后一次出现的位置
	连接字符串
	字符串出现的次数
	字符串中子串替换
	大小写转换
	trim操作

1.1、字符串比较
	// Compare 函数，用于比较两个字符串的大小，如果两个字符串相等，返回为 0。如果 a 小于 b ，返回 -1 ，反之返回 1 。
	不推荐使用这个函数，直接使用 【== != > < >= <= 等一系列运算符更加直观】。
	func Compare(a, b string) int 
	// EqualFold 函数，计算 s 与 t 忽略字母大小写后是否相等。
	func EqualFold(s, t string) bool

1.2、是否存在某个字符或子串
	func Contains(s, substr string) bool
	func ContainAny(s, chars string) bool
	func ContainsRune(s string, r rune) bool

1.3、子串出现次数（字符串匹配）
	func Count(s, sep string) int
	特殊情况：sep为空时，返回值是utf8.RuneCountInString(s) + 1
		fmt.Println(strings.Count("cheese", "e"))//3
		fmt.Println(len("谷歌中国"))//12
		fmt.Println(strings.Count("谷歌中国"， ""))//5
		fmt.Println(strings.Count("fivevev", "vev"))//1;计算的是无重叠的次数

1.4、字符串分割为[]string
		func Fields(s string) []string
			fmt.Printf("Fields are: %q", strings.Fields("f oo bar  baz"))//fmt.Printf("Fields are: %q", strings.Fields("f oo bar  baz"))
		func FieldsFunc(s string, f func(rune) bool) []string
			满足回调函数再处理

		Split 和 SplitAfter、 SplitN 和 SplitAfterN
			使用同一个内部函数来实现的
			func Split(s, sep string) []string { return genSplit(s, sep, 0, -1) }
			func SplitAfter(s, sep string) []string { return genSplit(s, sep, len(sep), -1) }
			func SplitN(s, sep string, n int) []string { return genSplit(s, sep, 0, n) }
			func SplitAfterN(s, sep string, n int) []string { return genSplit(s, sep, len(sep), n) }

1.5、字符串是否有某个签缀或后缀
	func HasPrefix(s, prefix string) bool{}//是否已前缀开始
	func HasSuffix(s, suffix string) bool{}//是否已后缀结尾
		示例：
			fmt.Println(strings.HasPrefix("Gopher", "Go"))
			fmt.Println(strings.HasPrefix("Gopher", "C"))
			fmt.Println(strings.HasPrefix("Gopher", ""))
			fmt.Println(strings.HasSuffix("Amigo", "go"))
			fmt.Println(strings.HasSuffix("Amigo", "Ami"))
			fmt.Println(strings.HasSuffix("Amigo", ""))

1.6、字符或子串在字符中出现的位置
		func Index(s, sep string) int
		func IndexByte(s string, c byte) int
		func IndexAny(s, chars string) int
		func IndexFunc(s string, func(rune) boole) int
		func IndexRune(s string, r rune) int

		func LastIndex(s, sep string) int
		func LastIndexByte(s string, c byte) int
		func LastIndexAny(s, chars string) int
		func LastIndexFunc(s string, f func(rune) bool) int

1.7、字符串join操作链接
	将字符串数组（或slice）链接起来通过join实现
		func Join(a []string, sep string) string

1.8、字符串重复几次
	func repeat(s string, count int) string
		fmt.Println("ba" + strings.Repeat("na", 2))

1.9、字符替换
	func Map(mapping func(rune) rune, s string) string

1.10、字符串子串替换
	func Replace(s, old, new string, n int) string
	func RepalceAll(s, old, new string) string

1.11、字符串大小写转换
	func ToLower(s string) string
	func ToLowerSpecial(c unicode.SpecialCase, s string) string
	func ToUpper(s string) string
	func ToUpperSpecial(c unicode.SpecialCase, s string) string

	ToLowerSpecial,ToUpperSpecial 可以转换特殊字符的大小写

1.12、标题处理
	func Title (s string) string //将s每个单词的首字母大写
	func ToTitle(s string) string //将s的每个字母大写
	func ToTitleSpecial(c unicode.SpecialCase, s string) string //会将一下特殊字符转换

1.13、修剪
	// 将 s 左侧和右侧中匹配 cutset 中的任一字符的字符去掉
	func Trim(s string, cutset string) string
	// 将 s 左侧的匹配 cutset 中的任一字符的字符去掉
	func TrimLeft(s string, cutset string) string
	// 将 s 右侧的匹配 cutset 中的任一字符的字符去掉
	func TrimRight(s string, cutset string) string
	// 如果 s 的前缀为 prefix 则返回去掉前缀后的 string , 否则 s 没有变化。
	func TrimPrefix(s, prefix string) string
	// 如果 s 的后缀为 suffix 则返回去掉后缀后的 string , 否则 s 没有变化。
	func TrimSuffix(s, suffix string) string
	// 将 s 左侧和右侧的间隔符去掉。常见间隔符包括：'\t', '\n', '\v', '\f', '\r', ' ', U+0085 (NEL)
	func TrimSpace(s string) string
	// 将 s 左侧和右侧的匹配 f 的字符去掉
	func TrimFunc(s string, f func(rune) bool) string
	// 将 s 左侧的匹配 f 的字符去掉
	func TrimLeftFunc(s string, f func(rune) bool) string
	// 将 s 右侧的匹配 f 的字符去掉
	func TrimRightFunc(s string, f func(rune) bool) string