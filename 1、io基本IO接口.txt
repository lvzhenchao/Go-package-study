
1、IO介绍
	含义：输入（Input）经过算法处理产生输出（Output）
	
2、io：最基本的IO接口
	最重要的两个接口：
		Reader和Writer接口

	-Reader接口：
		type Reader interface {
			Read(p []byte) (n int, err error)
		}

		方法集：只包含一个Read方法；
					所有实现了Read()方法的类型都满足io.Reader接口
						在需要io.Reader的地方，可以传递实现了Read()方法的类型的【实例】
							示例用法：

								//io.Reader 作为参数
								//只要来源实现了io.Reader的接口（Read()方法）
								func ReadFrom(reader io.Reader, num int) ([]byte, error) {
								    p := make([]byte, num)
								    n, err := reader.Read(p)
								    if n > 0 {
								        return p[:n], nil
								    }
								    return p, err
								}

								//从标准输入
								data, err = ReadFrom(os.Stdin, 11)//Stdin  = NewFile(uintptr(syscall.Stdin), "/dev/stdin")
								//从普通文件读取，其中file是os.File的实例
								data, err = ReadFrom(file, 9)//type File struct {*file // os specific}
								//从字符串读取
								data, err = ReadFrom(strings.NewReader("from string"), 12)//func NewReader(s string) *Reader { return &Reader{s, 0, -1} }

	-Writer接口：
		type Writer interface {
		    Write(p []byte) (n int, err error)
		}

		方法集：只包含一个Write方法
					所有实现了Write方法的类型都实现了io.Writer接口
							示例用法：
								fmt包内有一组【函数】：
									Fprint/Fprintf/Fprintln

									func Fprint(w io.Writer, a ...interface{}) (n int, err error)
									func Fprintf(w io.Writer, format string, a ...interface{}) (n int, err error)
									func Fprintln(w io.Writer, a ...interface{}) (n int, err error)

3、如何查看实现了io.Reader接口或io.Writer接口的类型？
	函数参数是一个接口类型，如何传递参数？
		标准库有哪些类型实现了io.Reader或io.Writer接口？
			os.File{} 同时实现了读写两个接口：
				这三个都是【os.File】的实例：自然也实现了io.Reader和io.Writer
					Stdin  = NewFile(uintptr(syscall.Stdin), "/dev/stdin")
					Stdout = NewFile(uintptr(syscall.Stdout), "/dev/stdout")
					Stderr = NewFile(uintptr(syscall.Stderr), "/dev/stderr")

					-os.File 同时实现了 io.Reader 和 io.Writer
					-strings.Reader 实现了 io.Reader
					-bufio.Reader/Writer 分别实现了 io.Reader 和 io.Writer
					-bytes.Buffer 同时实现了 io.Reader 和 io.Writer
					-bytes.Reader 实现了 io.Reader
					-compress/gzip.Reader/Writer 分别实现了 io.Reader 和 io.Writer
					-crypto/cipher.StreamReader/StreamWriter 分别实现了 io.Reader 和 io.Writer
					-crypto/tls.Conn 同时实现了 io.Reader 和 io.Writer
					-encoding/csv.Reader/Writer 分别实现了 io.Reader 和 io.Writer
					-mime/multipart.Part 实现了 io.Reader
					-net/conn 分别实现了 io.Reader 和 io.Writer(Conn接口定义了Read/Write)

				常用的类型有：os.File、strings.Reader、bufio.Reader/Writer、bytes.Buffer、bytes.Reader


4、ReaderAt 和 WriterAt 接口
	ReaderAt接口：从偏移量处开始读取
		type ReaderAt interface {
		    ReadAt(p []byte, off int64) (n int, err error)
		}

	WriteAt接口：从偏移量处开始写入
		type WriterAt interface {
			WriteAt(p []byte, off int64) (n int, err error)
		}
		示例：
			file, err := os.Create("writeAt.txt")
			if (err != nil) {
				panic(err)
			}
			defer file.Close()
			file.WriteString("这句话")

			n, err := file.WriteAt([]byte("有句话"), 3)
			if err != nil {
				panic(err)
			}
			fmt.PrintLn(n)




